;
; folink2.tas: flat OMF linker implemented in TASM 1.01--2.0--4.1--5.3 targeting DOS 8086
; by pts@fazekas.hu at Tue Mar 26 02:24:06 CET 2024
;
; This linker just dumps the data in the LEDATA, LEDATA386, LIDATA and
; LIDATA386 records in the input OMF file. For the LIDATA and LIDATA386
; records, it expands the repeated bytes. It fails if it encounters
; multiple segments or any relocations (fixupps).
;
; Compile with TASM 1.01--(some) on DOS after copying this file to f.t (with uppercase filename in the command line): tasm /t /dd F.T folink2.com
; Compile with TASM 1.01--(some) on Linux with kvikdos: cp -a folink2.tas f.t && kvikdos tasm.exe /t /dd F.T folink2.com
; Compile with TASM 2.0--4.1--5.3 on DOS after copying this file to f.upu: tasm /t f.upu folink2t.com
; Compile with TASM 2.0--4.1--5.3 on Linux with kvikdos: cp -a folink2.tas f.upu && kvikdos tasm.exe /t f.upu folink2t.com
; Compile with LZASM --0.56 on DOS after copying this file to f.upu: lzasm /t f.upu folink2.com
; Compile with LZASM --0.56 on Linux with kvikdos: cp -a folink2.tas f.upu && dosbox.nox.static --cmd --mem-mb=2 lzasm.exe /t f.upu folink2.com
;
; Implementation based on folink2.c and on the disassembly of the
; folink2.obj file created by `dosmc -mt -c folink2.c'.
;

ideal

; This is the no-link hack. It makes the output file of TASM valid not only as OMF
; .obj, but also as DOS .com program. This way we don't need tlink.exe at all,
; previously we used tlink.exe to generate the DOS .com program.
;
; There are some restrictions on the TASM source filename (e.g. f.upu or
; F.T), the TASM version (minimum version is 1.01 (1989), see below), the
; LZASM version (0.56 (2007) is known to work) and the use of the /q flag,
; and uninitialized global variables must be accessed in
; position-independent way (see @@base1 in the code below on how).
;
; Compilation options for DOS (with the source file named file.tas):
;
;   copy /b file.tas f.upu
;   tasm f.upu file.com
;   del f.upu
;
;   (Alternatively, above `tasm /q', `lzasm' and `lzasm /q` can be used instead
;   of `tasm'.)
;
;   copy /b file.tas F.T
;   tasm /dd F.T file.com
;   del F.T
;
;   tasm /dt file.tas
;   tlink /t file.obj
;   del file.com
ideal
ifdef d  ; Filename: F.T (with uppercase in the command line). Compile (wituout /q): tasm /dd F.T
  ; TASM versions supported: 1.01, 2.01, 2.02, 3.0, 3.1, 3.2i, 4.0, 4.1, 5.0, 5.2, 5.3, 5.4. Not supported: 1.0, 2.0, 2.5. Untested: 5.0r, 5.2b.
  ; LZASM is not supported.
  ; TASM 1.0 and 1.01 convert the source filename in the OMF THEADR record to uppercase. Other TASM versions leave it intact.
  ; This version of hack makes the OMF .obj file start like this (with the OMF THEADR record) for TASM eariler than 3.0:
  ;   00000100  800500            add byte [di],0x0
  ;   00000103  03462E            add ax,[bp+0x2e]    ; 0x46 is 'F', 0x2e is '.'.
  ;   00000106  54                push sp             ; 0x54 is 'T'.
  ;   00000107  B088              mov al,0x88         ; 0xb0 is the checksum byte of the previous OMF THEADR record.
  ;   00000109  2000              and [bx+si],al
  ;   0000010B  0000              add [bx+si],al
  ;   0000010D  54                push sp             ; 0x54 is 'T'. The string 'Turbo Assembler' starts here (not for LZASM).
  ;   0000010E  7572              jnz 0x182
  ; This version of hack makes the OMF .obj file start like this (with the OMF THEADR record) for TASM 3.0 and later.
  ;   00000100  800500            add byte [di],0x0
  ;   00000103  03462E            add ax,[bp+0x2e]    ; 0x46 is 'F', 0x2e is '.'.
  ;   00000106  54                push sp             ; 0x54 is 'T'.
  ;   00000107  B088              mov al,0x88         ; 0xb0 is the checksum byte of the previous OMF THEADR record.
  ;   00000109  2000              and [bx+si],al
  ;   0000010B  0000              add [bx+si],al
  ;   0000010D  1C54              sbb al,0x54         ; 0x54 is 'T'. The string 'Turbo Assembler' starts here (not for LZASM).
  ;   0000010F  7572              jnz 0x183
  ifdef @lzasm  ; LZASM --0.56.
    err 'LZASM not supported.  ; Because only TASM (but not LZASM) generates the bytes 'ur' (as part of `Turbo') in the first OMF COMENT record.
  endif
  ifdef ??version  ; TASM, but not LZASM.
    ifndef f  ; TASM 2.0 and 2.5 create broken output (crash at DOS program startup) because of assembler version OMF COMENT record size differences.
      if ??version eq 200h
        err 'please use /df to force compilation with TASM 2.01 or 2.02 (but it creates broken output with TASM 2.0)'
      endif
      if ??version eq 205h
        err 'please use /df to force compilation with TASM 2.51 (but it creates broken output with TASM 2.5)'
      endif
    endif
  endif
  segment A
  db 'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'  ; Harmless `inc bx'.
  xor bx, bx
  push bx  ; Push the return address to the `int 20h' below.
  mov [word bx], 20cdh  ; Restore `int 20h' to the beginning to PSP.
  mov ax, 200h
  push ax
  xor ax, ax
  ret  ; Jump to 200h, somewhere before _start.
  db 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
  ends
  segment C
  org 200h  ; Large enough to make to uninitialized variables (starting at ___section_bss) work. Normal base (without OMF headers) would be 100h.
  db 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB'
else  ; Filename: f.upu (with lowercase in the command line). Compile any of: tasm f.upu ;; tasm /q f.upu ;; lzasm f.upu ;; lzasm /q f.upu
  ; TASM versions supported: 2.0 and later, i.e. 2.0, 2.01, 2.02, 2.5, 2.51, 3.0, 3.1, 3.2, 3.2i, 4.0, 4.1, 5.0, 5.0r, 5.2b, 5.2, 5.3, 5.4. Not supported: 1.0, 1.01.
  ; LZASM versions supported: 0.56, and maybe earlier.
  ; This version of hack makes the OMF .obj file start like this (with the OMF THEADR record):
  ;   00000100  800700            add byte [bx],0x0
  ;   00000103  05662E            add ax,0x2e66  ; 0x66 is 'f', 0x2e is '.'.
  ;   00000106  7570              jnz 0x178      ; 0x75 is 'u', 0x70 is 'p'.
  ;   00000108  75                db 0x75        ; 0x75 is 'u'. It could be any other byte.
  ; Start file offsets of the first `db' below: with TASM /q: 32h; with LZASM 0.56 /q: 55h, TASM without /q: varies between 6ah and 6bh.
  ifdef ??version  ; TASM, but not LZASM.
    if ??version lt 200h  ; True for TASM 1.0 and 1.01.
      ifndef t
        err 'please use the /dd version instead for TASM 1.0 and 1.01'  ; Because TASM 1.x converts the filename in the OMF THEADR record to uppercase.
      endif
    endif
  endif
  segment C
  ifdef t
    org 100h  ; For regular compilation with TASM + TLINK to file.com: tasm /dt file.tas ;; tlink /t file.obj
  else
    org 200h  ; Large enough to make to uninitialized variables (starting at ___section_bss) work. Normal base (without OMF headers) would be 100h.
    db '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'  ; Harmless `inc ax' to accommodate for OMF record size differences.
    db '@@@@@@@@@@@@@'  ; Harmless `inc ax' to accommodate longer (possibly unknown) assembler version OMF COMENT record.
    xor ax, ax
  endif
endif
assume cs:C, ds:C, es:C, ss:C

locals @@

_start:  ; Entry point of the DOS .com program.
		cld
		mov di, offset ___section_c_bss
		mov cx, (___section_startup_ubss-___section_c_bss+1) shr 1
		xor ax, ax
		rep stosw
		mov di, offset argv_bytes
		mov bp, offset argv_pointers
		push bp
		push es
		lds si, [02ch-2]  ; Environment segment within PSP.
		
		xor si, si
		lodsb
@@next_entry:	test al, al
		jz @@end_entries
@@next_char:	test al, al
		lodsb
		jnz @@next_char
		jmp short @@next_entry
@@end_entries:	inc si  ; Skip over a single byte.
		inc si  ; Skip over '\0'.
		; Now ds:si points to the program name as an uppercase, absolute pathname with extension (e.g. .EXE or .COM). We will use it as argv.
		
		; Copy program name to argv[0].
		mov [bp], di  ; argv[0] pointer.
		inc bp
		inc bp
		mov cx, 144  ; To avoid overflowing argv_bytes. See above why 144.
@@next_copy:	dec cx
		jnz @@argv0_limit_not_reached
		xor al, al
		stosb
		jmp short @@after_copy
@@argv0_limit_not_reached:
		lodsb
		stosb
		test al, al
		jnz @@next_copy
@@after_copy:
		
		; Now copy cmdline.
		pop ds  ; PSP.
		mov si, 080h  ; Command-line size byte within PSP, usually space. 0..127, we trust it.
		lodsb
		xor ah, ah
		xchg bx, ax  ; bx := ax.
		mov [byte si+bx], 0
@@scan_for_arg:	lodsb
		test al, al
		jz @@after_cmdline
		cmp al, ' '
		je @@scan_for_arg
		cmp al, 9  ; Tab.
		je @@scan_for_arg
		mov [bp], di  ; Start new argv[...] element. Uses ss by default, good.
		inc bp
		inc bp
		stosb  ; First byte of argv[...].
@@next_argv_byte:
		lodsb
		stosb
		test al, al
		jz @@after_cmdline
		cmp al, ' '
		je @@end_arg
		cmp al, 9  ; Tab.
		jne @@next_argv_byte
@@end_arg:	dec di
		xor al, al
		stosb  ; Replace whitespace with terminating '\0'.
		jmp short @@scan_for_arg
		
@@after_cmdline:	mov [word bp], 0  ; NULL at the end of argv.
		pop dx  ; argv_pointers. Final return value of dx.
		sub bp, dx
		xchg ax, bp  ; ax := bp.
		;shr ax, 1  ; Set ax to argc, it's final return value. No need to set it, main below doesn't use it.
		; Fall through to main_never_returns.

main_never_returns:  ; Never returns. Takes argv in DX.
		mov bp, sp
		sub sp, 12h
		mov bx, dx
		xor ax, ax
		cmp [word bx+2], ax
		je @@8
		cmp [word bx+4], ax
		je @@8
		cmp [word bx+6], ax
		je @@9
@@8:
		mov bx, 23h
		call @@base1
@@base1:
		pop dx
		add dx, msg_usage-@@base1  ; DX := offset msg_usage. The no-link hack requires such a position-independent way.
		mov ax, 2
		call write_
		mov ax, 4c01h
		int 21h
@@9:
		mov ax, [word bx+2]
		xor dx, dx
		call open2_
		mov [word _rdfd], ax
		test ax, ax
		jge @@10
		mov ax, 14h
		call fatal_
@@10:
		mov ax, [word bx+4]
		call creat1_
		mov [word _wrfd], ax
		test ax, ax
		jge @@11
		mov ax, 15h
		call fatal_
@@11:
		xor bx, bx
		mov [byte bp-2], 0
@@12:
		mov [word _rsize], 3
		call r8_
		mov dx, ax
		call r16_le_
		mov [word _rsize], ax
		test ax, ax
		ja @@13
		mov ax, 2
		call fatal_
@@13:
		dec [word _rsize]
		cmp dx, 8ah
		je @@15
		cmp dx, 8bh
		je @@15
		cmp dx, 88h
		je @@14
		cmp dx, 9ah
		je @@14
		cmp dx, 96h
		je @@14
		cmp dx, 98h
		je @@14
		cmp dx, 99h
		je @@14
		cmp dx, 80h
		jne @@16
@@14:
		cmp [word _rsize], 0
		jbe @@21
		call r8_
		jmp @@14
@@15:
		jmp @@41
@@16:
		cmp dx, 0a0h
		je @@17
		cmp dx, 0a2h
		je @@17
		cmp dx, 0a1h
		je @@17
		cmp dx, 0a3h
		jne @@26
@@17:
		call r8_
		cmp ax, 1
		je @@18
		mov ax, 0bh
		call fatal_
@@18:
		call r16_le_
		mov cx, ax
		cmp dx, 0a1h
		je @@19
		cmp dx, 0a3h
		jne @@20
@@19:
		call r16_le_
@@20:
		cmp [byte bp-2], 0
		je @@22
		cmp cx, bx
		je @@23
		mov ax, 4
		call fatal_
		jmp @@23
@@21:
		jmp @@38
@@22:
		mov bx, cx
		inc [byte bp-2]
@@23:
		cmp dx, 0a0h
		je @@24
		cmp dx, 0a1h
		jne @@27
@@24:
		add bx, [word _rsize]
@@25:
		cmp [word _rsize], 0
		jbe @@21
		call r8_
		call w8_
		jmp @@25
@@26:
		jmp @@37
@@27:
		call r16_le_
		mov cx, ax
		mov [word bp-8], ax
		mov [word bp-18], 0
		cmp dx, 0a3h
		jne @@28
		call r16_le_
		mov [word bp-18], ax
@@28:
		call r16_le_
		mov si, ax
		test ax, ax
		jne @@29
		mov ax, 6
		call fatal_
@@29:
		test si, si
		jbe @@21
		call r16_le_
		mov cx, ax
		mov di, ax
		mov [word bp-6], 0
		cmp dx, 0a3h
		jne @@30
		call r16_le_
		mov [word bp-6], ax
@@30:
		call r16_le_
		test ax, ax
		je @@31
		mov ax, 8
		call fatal_
@@31:
		call r8_
		mov cx, ax
		call r8_
		mov [word bp-12], ax
		cmp cx, 1
		je @@32
		mov ax, 9
		call fatal_
@@32:
		mov ax, [word bp-8]
		mov [word bp-10], ax
		mov cx, [word bp-18]
@@33:
		mov ax, [word bp-10]
		or ax, cx
		test ax, ax
		jbe @@36
		add bx, di
		mov [word bp-4], di
		mov ax, [word bp-6]
		mov [word bp-14], ax
@@34:
		mov ax, [word bp-14]
		or ax, [word bp-4]
		test ax, ax
		jbe @@35
		mov al, [byte bp-12]
		call w8_
		add [word bp-4], -1
		adc [word bp-14], -1
		jmp @@34
@@35:
		add [word bp-10], -1
		adc cx, -1
		jmp @@33
@@36:
		dec si
		jmp @@29
@@37:
		mov ax, 12h
		call fatal_
@@38:
		inc [word _rsize]
		call r8_
		cmp [word _rsize], 0
		jne @@40
@@39:
		jmp @@12
@@40:
		mov ax, 0ah
		call fatal_
		jmp @@39
@@41:
		call wflush_
		mov ax, 4c00h  ; EXIT_SUCCESS.
		int 21h
		; Not reached.

fatal_:  ; Never returns.
		mov cx, ax
		mov bx, 15h
		call @@base2
@@base2:
		pop dx
		add dx, msg_fatal-@@base2  ; DX := offset msg_usage. The no-link hack requires such a position-independent way.
		mov ax, 2
		call write_
		xchg ax, cx  ; AL := CL; AH := junk; CL := junk.
		mov ah, 4ch
		int 21h
		; Not reached.

wflush_:
		push bx
		push dx
		mov ax, [word _wri]
		test ax, ax
		jbe @@6
		mov bx, ax
		mov ax, [word _wrfd]
		mov dx, offset _wrbuf
		call write_
		test ax, ax
		jle @@4
		cmp ax, [word _wri]
		je @@5
@@4:
		mov ax, 7
		call fatal_
@@5:
		xor ax, ax
		mov [word _wri], ax
@@6:
		pop dx
		pop bx
		ret

w8_:
		push bx
		push dx
		mov dl, al
		cmp [word _wri], 200h
		jne @@7
		call wflush_
@@7:
		mov bx, [word _wri]
		mov [byte bx+_wrbuf], dl
		inc bx
		mov [word _wri], bx
		pop dx
		pop bx
		ret

r8_:
		push bx
		push dx
		cmp [word _rsize], 0
		jne @@1
		mov ax, 3
		call fatal_
@@1:
		mov ax, [word _rdi]
		cmp ax, [word _rdlimit]
		jne @@3
		mov ax, [word _rdfd]
		mov bx, 200h
		mov dx, offset _rdbuf
		call read_
		mov bx, ax
		test ax, ax
		jge @@2
		mov ax, 5
		call fatal_
@@2:
		mov [word _rdlimit], bx
		xor ax, ax
		mov [word _rdi], ax
@@3:
		mov bx, [word _rdi]
		mov al, [byte bx+_rdbuf]
		xor ah, ah
		dec [word _rsize]
		inc bx
		mov [word _rdi], bx
		pop dx
		pop bx
		ret

r16_le_:
		push dx
		call r8_  ; Read low byte.
		xchg dx, ax  ; DX := AX; AX := junk.
		call r8_  ; Read high byte.
		mov dh, al
		xchg dx, ax
		pop dx
		ret

; ssize_t write(int fd, const void *buf, size_t count);
; Optimized for size. AX == fd, DX == buf, BX == count.
write_:		push cx
		xchg ax, bx		; AX := count; BX := fd.
		xchg ax, cx		; CX := count; AX := junk.
		mov ah, 040h
		jmp int21cx

; ssize_t read(int fd, void *buf, size_t count);
; Optimized for size. AX == fd, DX == buf, BX == count.
read_:		push cx
		xchg ax, bx		; AX := count; BX := fd.
		xchg ax, cx		; CX := count; AX := junk.
		mov ah, 03fh
int21cx:	int 021h
		jnc @@ok
		sbb ax, ax		; AX := -1.
@@ok:		pop cx
		ret


; int creat(const char *pathname, int mode);
; int creat1(const char *pathname);
; Optimized for size. AX == pathname, DX == mode.
; The value O_CREAT | O_TRUNC | O_WRONLY is used as flags.
; mode is ignored, except for bit 8 (read-only). Recommended value: 0644,
; for Unix compatibility.
creat1_:
creat_:		push cx
		xchg ax, dx		; DX := pathname; AX := mode.
		xor cx, cx
		test ah, 1
		jz @@1
		inc cx			; CX := 1 means read-only.
@@1:		mov ah, 03ch
		jmp int21cx

; int open(const char *pathname, int flags, int mode);
; int open2(const char *pathname, int flags);
; Optimized for size. AX == pathname, DX == flags, BX == mode.
; Unix open(2) is able to create new files (O_CREAT), in DOS please use
; creat() for that.
; mode is ignored. Recommended value: 0644, for Unix compatibility.
open2_:
open_:		xchg ax, dx		; DX := pathname; AX := junk.
		mov ah, 03dh
		int 021h
		jnc @@ok
		sbb ax, ax		; AX := -1.
@@ok:		ret

msg_fatal:	db 'folink2 fatal error', 13, 10, 0
msg_usage:	db 'Usage: folink2 <in.obj> <out.bin>', 13, 10, 0

; TODO(pts): Assert that the maximum file size up to this point (including
; the db '@@' at the beginning) is 0x400. That's the maximum size for a
; single LEDATA record in the OMF .obj file generated by TASM.

; --- Variables initialized to 0 by _start.
		; The .obj hack omits the ? values from the .obj file. Good.
		db (_start-$) and 1 dup (?)  ; align 2
		;section .bss align=1
___section_bss:

___section_c_bss:
_wrbuf:		db 200h dup (?)
_rdbuf:		db 200h dup (?)
_wrfd:		dw ?
_rdfd:		dw ?
_wri:		dw ?
_rdlimit:	dw ?
_rsize:		dw ?
_rdi:		dw ?

; --- Uninitialized .bss used by _start.    ___section_startup_ubss:
___section_startup_ubss:

argv_bytes	db 270 dup (?)
argv_pointers	db 130 dup (?)

___section_ubss_end:

ends
end _start
